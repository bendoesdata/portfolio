!function(){"use strict";const e=1613405532650,t=`cache${e}`,s=["/client/client.21afa081.js","/client/inject_styles.5607aec6.js","/client/index.2fec4019.js","/client/index.554af524.js","/client/about.1bc1cd9e.js","/client/index.0a68e587.js","/client/[slug].ec906080.js","/client/work.de496097.js"].concat(["/service-worker-index.html","/.DS_Store","/case_studies/algae-essay.html","/case_studies/algae-essay.md","/data/projects.js","/favicon.png","/fonts/Circular-Std-Font.otf","/global.css","/images/.DS_Store","/images/ben-trace.svg","/images/front-page/algae-radar.png","/images/front-page/algae-tree.png","/images/front-page/book-scrolly.png","/images/front-page/book-sort.png","/images/front-page/c2s-dashboard.png","/images/front-page/k12-map.png","/images/front-page/rephub.png","/images/projects/.DS_Store","/images/projects/altair-panel.png","/images/projects/arcs.png","/images/projects/asteroids.png","/images/projects/c2s-mockup-top.png","/images/projects/codevember-header.png","/images/projects/flowers.png","/images/projects/geopandas.png","/images/projects/gephi-graphic.png","/images/projects/gif-map.gif","/images/projects/literacy.jpeg","/images/projects/projects_2019.png","/images/projects/projects_algae-trees.png","/images/projects/qtba.png","/images/projects/to-the-books.png","/images/projects/trump-network.png","/images/projects/year_2019.png","/logo-192.png","/logo-512.png","/manifest.json"]),a=new Set(s);self.addEventListener("install",(e=>{e.waitUntil(caches.open(t).then((e=>e.addAll(s))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((async e=>{for(const s of e)s!==t&&await caches.delete(s);self.clients.claim()})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method||t.request.headers.has("range"))return;const s=new URL(t.request.url),n=s.protocol.startsWith("http"),c=s.hostname===self.location.hostname&&s.port!==self.location.port,o=s.host===self.location.host&&a.has(s.pathname),i="only-if-cached"===t.request.cache&&!o;!n||c||i||t.respondWith((async()=>o&&await caches.match(t.request)||async function(t){const s=await caches.open(`offline${e}`);try{const e=await fetch(t);return s.put(t,e.clone()),e}catch(e){const a=await s.match(t);if(a)return a;throw e}}(t.request))())}))}();
